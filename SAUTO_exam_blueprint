SAUTO Exam blueprint notes

1.0 Network Programmability foundation

1.1 Utilize common version control operations with git (add, clone, push, commit, diff, branching, and merging conflict)
https://app.pluralsight.com/library/courses/getting-started-git/table-of-contents

1.1.0 === Quick setup ===
https://github.com/wired-brain-coffee/wired-brain-recipes.git
We recommend every repository include a README, LICENSE, and .gitignore.


...or create a new repository on the command line

echo "# wired-brain-recipes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master


...or push an existing repository from the command line

git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master

...or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


What is GIT?
Git is a VCS: Version Control System.
- This is Software designed to record changes made to files over time.
- Ability to revert back to a previous file version or project version.
- Compare changes made to files from one version to another.
- Version control any plain text file, not just source code.

Version control is the ultimate time travel machine for your project.

UNDERSTANDING HOW GIT MANAGES DATA IS THE MOST IMPORTANT THING TO REMEMBER ABOUT GIT

1.1.1 ==== GIT has three main Stages of a File =====

GIT has three main Stages of a File

1. Committed < data is savely store >
2. Modified  < data is modified from the previously commited stage, file contents have changed, but has not commited the file >
3. Staged    < Changes are Marked for Commit, so Marked changes have been added to the commit snapshot >

The Three States of a GIT Project are similar:

1. Working Directory			2. Staging Area (Index)    3. .git directory (Repository)
      <-------------Checkout a version of the project from origin--------------*
	  *------Stage fixes for next commit--->
					    *----Commit changes form Index----->


Using the command line
pwd 	= print working directory <just returns your current folder path location>
cd		= change working directory
cd~		= change to the home directory
cd.. 	= change up one level in directory hierarchy
ls		= list files in a directory (windows dir)
touch	= create a new empty file (copy con for windows users)

1.1.2 ==== Install Git on Linux ====

Debian: flavors ( Ubuntu )
sudo apt-get install git

Fedora:
sudo yum install git

Windows: (has several free options but below install is easy)
https://git-scm.com/download/win
this automatically installs the git installer. This installation also installs a command-line tool called Git BASH.
that will give you a more Linux feel on a Window system to perform the GIT commands.

Mac: Similar to windows but use the below link instead:
https://git-scm.com/download/mac
Mac users can also use: homebrew <free and opensource package manger> 
brew install git

verify if installation was successful with:
$ git --version
git version 2.25.1

Now that we have verified that Git has been installed, the first thing we should do is set up our username and email address:

$ git config --global user.name "jayantbehari"
$ git config --global user.email "beharij@gmail.com"

If you want to run the same for a specific project, you can do so without the --global option when you are in the project.
This will overwrite your global settings, but just for this specific project.

if you want to check your configuration settings type:
git config --list

To check out a specific setting say "name" type:

git config user.name

The gitmanual at your finger tips:
man git

Git commands are divided in high level ("porcelain") and low level ("plumbing ") commands.

* porcelain:
	git-add < add file contents to the index.>
	git-am 	< apply a series of patches from a mailbox.>
	git-archive < create an archive of files from a named tree.>
	git-checkout < switch branches or restore working tree files.>
	git-clone <clone a repository into a new directory.>
	git-commit <record changes to the repository>
	git-diff <show changes between commits, commit and working tree, etc.>
	git-grep <pring lines matching a pattern.>
	git-init <create an empty git repository or reinitialize an existing one.>
	git-merge <Join tow or more development histories together.>
	git-push <update remote refs along with associated objects.>
	
* Plumbing <prilemanary for scripted use, goes deeper than porcelain, plumbing is for advanced users>
	git-apply <apply a patch to files and/or to the index.>
	git-commit-tree <create a new commit object.>
	git-mktree <build a tree-object from ls-tree formatted text.>
	

git help config <gives more help regarding the config section>

1.1.3 === To initialize a new git repository ===

cd to the folder of your new project.
$ cd desktop/cafe_recipes
$ git init <creates a hidden .git directory. Go to this folder cd .git then ls gives a list of files and folders in the .git directory
remember that the .git directory contains all the git meta data for the newly created project.

We have now installed git, initialized git and added files to our git project as a git repository.
The files are now version controlled by git, and are ready to be tracked of any changes to be made.

But as all this is only local at our local desktop computer this project can only be updated from the local computer.
To solve this we can host this git repository in an online cloud-like setting.

GITHUB <online GIT repository hosting>
Using HTTPS URLs to push or pull changes to or from your repository.

https://github.com/wired-brain-coffee/wired-brain-recipes.git
We recommend every repository include a README, LICENSE, and .gitignore.


...or create a new repository on the command line

echo "# wired-brain-recipes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master


...or push an existing repository from the command line

git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master

...or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


There is also an SSH option on github. (just click it)
in order to use this SSH secure protocol, you need to first generate an SSH key pair and then add that public key to your GitHub account
in your profile settings. Using SSH URLs to push or pull changes to or from your repository, GitHub will prompt you with your password and
you will need to enter in your SSH key passphrase.

more information is available at:
https://help.github.com/articles/which-remote-url-should-i-use

to stage all files currently in your project folder on your local desktop/laptop type":

git add .

then you could commit your first commit by typing:

git commit -m "first commit"  
< the -m option means message >
git then responds back with some interesting information and it can tell us what we just did. We then need to connect our local repository 
to the one we just created GitHub, by linking the two repositories with a git command. this can be done with the command:
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
This command adds the origin GitHub repository to our local repository by creating a link that allows us to push and pull changes between the two.
Now, we need to push our repository that is now pointing to our GitHub repository by typing: 
git push -u origin master

We are then prompted to type our GitHub username and password. and if verified, Git responds back with some information that at the bottam says,
Branch 'master' set up to track remote branch 'master' from origin.
Now this means that everything works!


1.1.4 ===Basic commands of Every day Git ===

https://github.com/a-a-ron

in the previous module we installed GIT with the global and local configurations with the 'git config' command
We also learned how to use 'man git' and the quick reference help guide 'git help'

High-level porcelain commands:
git add
git push

common everyday git commands are:
git status --short
git dif --staged
git diff
git status
git add A
git status -s

type clear command to clean your window

$ clear

you can check the status of your project any time:
$ git status
On branch master nothing to commit, working tree clean

A branch in git is a lightweight movable pointer to your project at a specific point in time.
Since our local and remote repository are in sync with each other, our local master branch is equal to the origin master branch.
When you initialize your git repository git creates a branch called master. When you make changes in git, you make them on a specific branch.
Branches are a core concept in git and a feature that adds a lot of value by allowing many different types of workflows that can involve many
different types of branches. But at least for right now we'll keep things simple and make all of our changes directly on the master branch.


Each file in our project can be in one of two states: (1) tracked or (2) untracked by git. Remember tracked files were in the previous git snapshot.
Tracked files can be in one of three states: 
commited <which are unmodified changes from the last snapshot>
modified <which are files that we have added changes to>
staged <which are files that we have marked to be added to our next commit snapshot>

Modified files that have been added are in the stage state. Git has provided us with another message that says use "git reset HEAD" and then file to unstage.
Resetting or removing files from the staged area is something we will cover in the next module. For now we just want to commit this new file.
We can tell that this file is staged because it is in the: "Changes to be committed:" section


Let's create a new file in our repository to keep track of the suppliers

$ touch vendors.txt

If we now run a "git status" commmand we now will see that the vendors.txt file is now under the "Untracked files:

---

$ git status
On branch master
Your branch is up to date with órigin/master'.

Untracked files: 
	(use "git add <file> ..." to include in what will be committed)
	
		vendors.txt
		
nothing added to commit but untracked files present (use "git add" to track)

---

Remember that untracked means that git sees a file that does not exist in our last commit snapshot. Now git won't track
anything unless we explicitly tell it to do so. But git gives us information on how to add this untracked file. The bottom message says:
nothing added to commit but untracked files present (use "git add" to track). So let's start tracking this file by typing git add vendors.txt
If we now run git status, we now see that the vendors.txt file is showing as a new file being tracked and that it's a new change waiting to be committed.


$ git add vendors.txt

Modified files that have been added are now in our staged state. git has provided us with another message that says use "git reset HEAD <file>..."to unstage)
---

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
	(use "git reset HEAD <file>..."to unstage)
		
		new file: vendors.txt

---

Resetting or removing files from the staged area is something that we're going to cover in the next module. For now, we just want to commit this new file.
We can tell that this file is staged because it's now under the Changes to be committed section.


If we committed this new vendors.txt file now, the contents of this file, when we perform the git add command, will be committed to our project in that sapshot.
But before committing this file, let's add some changes to a file that was already being tracked. If we type the ls command we see a lis of all files under
our project directory. we see the vendors.txt file, because we have added it to our local master branch, but we haven't committed it yet.

$ ls
README.md			employees.txt			mixed_mocho	
cappucino_cooler	        gingerbread_coffee		vendors.txt


Let's open up employees.txt, a file that is already being tracked, and add a new employee that was just hired. we can do this by using the command open -a, and 
then the name of your text editor, the editor in this case is atom, and then the name of the file, employees.txt. Now let's add the new employee and his 
information to the file. Let's now save that file and go back to our terminal window. if we type git status again we see that the employees.txt file is now 
under the changes not staged for commit section. 

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
	(use "git reset HEAD <file>..."to unstage)
		
		new file: vendors.txt

Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..."to discard changes in working directory)
	
			modified: 	employees.txt


This means that the file is being tracked by git and has been modified in our working directory. 
But it hasn't yet been added to our staging area for commit. Now we can stage this file by using the git add command. The git add is used to track new files, 
as well as add modified files to be staged. You can think of the "git add" command as add this file to be in the next commit snapshot.

So let's type git add employees.txt and add it to the staging area. Let's now run "git status" again and see what happened.

---

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
	(use "git reset HEAD <file>..."to unstage)
	
		modified:	employees.txt
		new file:	vendors.txt

---

both files are now staged and are showing as changes to be committed. Git provides us with information on what kind of file is being staged next to the file name.
We can see that the employees.txt file is a modified file, and the vendors.txt file is a new file read to be committed. But before we commit these files, We realize
that we recorded the new employee's phone number incorrectly.

So let's reopen the employees.txt file and make that change. We can open the file again by typing open -a atom employees.txt and let's make the change.
After making the change let's save our file again and go back to our terminal window. let's run git status again to see what happened.

---

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
	(use "git reset HEAD <file>..."to unstage)
	
		modified:	employees.txt
		new file:	vendors.txt

Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..."to discard changes in working directory)
	
			modified: 	employees.txt	

---

Notice that employees.txt is now showing as staged and ready to be committed, as well as showing as modified changes not yet staged.
Now this may seem a little confusing. I mean, how can a file be in two states at the same time?	Well the answer is how and when git stages a file.
When we first staged our employees.txt file by using the git add command, those changes were added at that point in time to be staged. When we fixed the
the phone number and then resaved the file, git sees this as a new change that was not added when we previously staged that file. If we committed the files in 
our staged area right now, the version of employees.txt when we added it to the staging area, is what will be committed into the snapshot. 
This will not include the fix we just made, since we haven't added that change to be included into our next commit snapshot by staging it with the "git add" command.

If you change a file after you run git add and you want those changes to be included in your next commit snapshot, you have to run "git add" again on that
file to add those changes, to be staged. So let's run git add employees.txt again and then run git status to see what happened. 

---

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
	(use "git reset HEAD <file>..."to unstage)
	
		modified:	employees.txt
		new file:	vendors.txt

---

We now see that the employees.txt file is now only showing in the staged area, which, again are changes to be included in our next commit snapshot.



1.1.5 === Short Status ===

So far, we have run the git status commands several times already, and each time we run get status, git provides us with pretty comprehensive response.
but after gettin used to git's response when using git status, it can be useful and nice to have a way to see these changes in a more compact response.
Git has provided a short status that provides the same amount of information, but in a much smaller and concise way. Now we can see this shortened 
response by typing "git status -s" or "git status --short". by running this command on our project, we get back a response that has our two files that are 
waiting to be committed but now with some interesting letters in front of them. 

---

$ git status --short
M employees.txt
A vendors.txt

---

Right now I bet you are pretty confused by looking at this response because it doesn't make much sense unless you understand the format	response that the
short status uses.


The key to understanding the short status response is knowing what the letters in front of the files mean and their placement. after running this command, 
git will place the name of the files in the far right column. There is then a middle column and a far-left column.

example 1.1.5
<staged>					<  Modified >					     <File Name>
M 													File 1
M 						    M							File 2
A													File 3
?						    ?							File 4



The far-left column indicates tat the file has been staged, and the middle column indicates that the file has been modified but remains in the working 
directory. The letter M means modified, and the letter A means new files that have been added to the staging area.

M = Modified
A = New file added to the staging area.
?? = New file untracked by Git

and two question marks mean that there is a new file that is untracked by git. So in example 1.1.5 File 1 is a modified file in the staging area, 
File 2 is a modified file in the staging area as well as modified in the working directory. this was the same case with our employees.txt file when 
we made a change after staging it. file 3 is a new file added to the staging area. And File 4 is a new file created but not yet being tracked.


So jumping over to our terminal window again:

---

$ git status --short
M employees.txt
A vendors.txt

---

We can see that our employees.txt file is showing modified in the staging area, and our vendors.txt file is a new file that has also been staged.
the short status is nice if you just want to see which files resides in what states. but what if you want to go the other direction and see more
information than just what git status shows? Well, git has a command for that too. If the git status command is too vague and you want to see
the actual changes being made in these files and not just know which files have been changed, you can use the "git diff" command. you can use git diff 
to answer two questions,

1. what changes have I staged that are ready to be committed, and 

2. what changes have I made but not staged?

If we want to see the changes we have staged that will go into our next commit, we can use git diff --staged.

So let's go over how to read this output.

---

git diff --staged

diff --git a/file1.txt b/file1.txt  <= compared file versions

Index 9863745..f30c839  100644      <= File metadata

--- a/file1.txt						<== Change Markers for File A/B
+++ b/file1.txt

@@ -12. 2 +12, 3 @@					<== Chunk Header


Exmple lines...						<== Chunk Changes

- Old content

+ New content

---

The first thing we see are the compared file versions. Git diff is comparing file a with file b. In almost every case file a and file b will be the same file, 
but just in different snapshot versions. This is shown with diff --git and then file a, followed by file b. The next line is the file metadata. Now this is 
technical information of our files. The first two numbers are the hashes or IDs of the two file versions that are being compared. As we were briefly introduced to
SHA-1 hashes in a previous module, Git identifies a file object at a specific version by using these SHA-1 hashes. The last number is most likely going to be 100644. 
Now this is just a internal file mode identifier that represents a normal file. Now there are other number identifiers, but diving into this metadata information is 
more advanced git knowledge that won't be covered in detail in this course. Again, for now. just know that it's there and the basics of what it is. Next we see the 
change markers for file a and b. File version a is assigned with the minus symbol, and file version b is assigned with the plus symbol. Next there is the diff chunk,
which is made up of two parts, the chunk header and the chunk changes. At the top of this chunk is the chunk header, and the header is enclosed with two @ symbols
on each side and will tell you which lines were changed in the file versions. File a is represented with a minus sign, and file b is represented with a plus sign.
In this example the -12 is saying that the minus sign, again, being file a, begins at line 12 and then has 2 lines that were modified.  The +12 is saging that the 
plus sign being file b, also begins at line 12 and has 3 lines that were modified. After the chunk header we have the chunk changes that contain the actual line 
changes.Now this often includes a few lines of unchanged lines before or after the changes to help provide context of where these changes are being made in the files.
These changes will either have a minus or a plus sign in front of the change to show you what version that change is occurring in. However, for files with only one 
or two lines of content these extra lines may not show up. So let's jump over to our terminal window again and run this command to see how it looks in our project.

---

$ git diff --staged
diff --git a/employees.txt b.employees.txt
index e69e329..097993b 100644                   < please note that the e69e329 hash is always a hash of an empty file!
--- a/employees.txt
+++ b/employees.txt
@@ -0,0 +1 @@
+ Jay Behari | 06196765427
diff --git a/employees.txt b.vendors.txt
similarity index 100%
copy from employees.txt
copy to vendors.txt



---

By running the git diff --staged command we see that the compared a and b versions files is employees.txt next we have the metadata with these file version hashes
and the file mode identifier, which is the id for a normal file. We then see the change markers for the two file versions of employees.txt with the minus being
the last committed snapshot version and the plus being the new changes that are in our stage state. We then see the chunk header that shows us the line changes 
being made in these files, and then we see the chunk changes where we actually see what is being changed. Now, we also see another compared a and b version files,
but unlike the employees.txt file comparison, this file a and file b comparison is with different files. File a is employees.txt and file b is vendors.txt
Below we see some interesting information that says similarity index 100% ---copy from employees.txt ---copy to vendors.txt. So what is going on here? Well the 
reason for this is how git thinks about file changes now, git does not care what the name of the files are. Git really only cares about the content inside of 
those files.

To go from a change file straight to commit (so in fact skip the staging step) use the command:
$ git commit -a


or if you also want to add the message use:

$ git commit -a -m "add comment here"
[master 7a1b6ce] add new vendors
2 files changed, 3 insertions(+)
create mode 100644 vendors.txt


1.1.6 ===  Summary ===
Check the status of our project
Track new files and add changes
Learned git status -s or git status --short
Complete diff information using git diff
Commit changes and skip staging area


1.1.7 ===  Extended Commands of Everyday Git ===

If you want to push your local repository to github use the command:

$ git push origin master

If you want to see the git history use the command:

$ git log


To remove a file completely from a git repository use the command:

$ git rm {type filename here without the brackets}

Check your change with:

$ git status

commit with

$ git commit


If you want to remove a file from the tracked repository but you still want to keep the file use the command:

$ git rm --cached {file name}

If you want to change a file name use the git mv command:

$ git mv readme.md readme

The above will change the readme.md command to readme


1.1.8 ===  Branches one of the best things about git ===

To see the power of branches in action go to the website

$ gopen http://git-school.github.io/visualization-git


to create a new branch

$ git checkoout -b new_branch

running git status gives the branch you are checkout to.

$ git status
On branch new_branch
Changes to be committed:
	(use "git reset HEAD <file>..."to unstage
	
		renamed: README.md --> README
		deleted: eggnog_latte
		deleted: irish_coffee
		
Untracked files:
	(use "git add <file>..."to include in what will be committed)
	
	irish_coffee

Here, we see that git tells us we are on branch new_branch	
Since these changes are already in our staging area we don't need to add them to be committed by running git add. just commit with dash m to add messages.

$ git commit -m "rename README.md remove eggnog_latte"


If you do not want to track a file anymore but you do not want to delete it you have the possibility to stash this file.
	

$ git add .

$ git stash

So where does this chang go? So if we type:

$ git stash list

git provides us with a list of work in progress changes that we have stashed along with the branch and som commit data

$ git stash list
stash@{0}: WIP on new_branch: cd50d44 rename README.md remove eggnog_latte

We can also type the below commands for more stash details:

$ git stash show
	irish_coffee | 1 +
	1 file changed, 1 insertion(+)

If we want to remove this change from stage we need to run the command:

$ git stash pop

and the change would be dropped back into this working directory.

We can create multiple branches like this:

$ git commit (commit something)
$ git commit ( commit some more changes)
$ git checkout -b new_branch (created a new_branch)
$ git commit (her we commit changes to new_branch)
$ git checkout master (this points the header back to the master branch)
$ git commit (this is a new commit on the master branch)

The purpose of branching is to work on code in the newly creating branch without modifying the master branch, this is a bit like sandboxing a server)
When we think that the code in the newly created branch is stable enough to be merged in the master branch we merge new_branch into the master branch

$ git merge new_branch (note the header still points to the master branch and we are merging new_branch into the master branch)


The Three Options of Git Reset:

1. Working Directory			2. Staging Area (Index)    3. .git directory (Repository)
      <-------------Checkout a version of the project from origin--------------*
	  *------Stage fixes for next commit--->
											*----Commit changes form Index----->
											
											<------------ git reset --soft-----*
											
	 <----------------------------------git reset --mixed ---------------------*
	 
	 
<---------------------------------------git reset hard ------------------------*	(this moves the changes to the thrash bin)

 
	 
	 
Be carefull with the git reset command. Because you are changing the repository history!!!!!

to push the repository from git --> github

$ git push origin master



1.1.8  ===  pull from remote origin ===

git clone https:// bla bla

git pull https:// bla bla


1.1.9  ===  Summary  ===

git log and git diff --> Check commit history 
git mv --> remove and move files
git checkout -b <new_branch> --> create new branch
git check out <branch_name> checkout to different branches
git merge branche
git reset --soft, git reset --mixed, git resert --hard --> reset commits
clone a repository










































======================== BASH ============================


#!/bin/bash

# Simple note-taking script

# get the date
date=$(date)

# get the topic
topic="$1"

# filename to write to
filename="${HOME}/${topic}notes.txt"

# Ask user for input
read -p "Your note: " note

echo $date: $note >> "$filename"
echo Note \'$note\' saved to $filename



