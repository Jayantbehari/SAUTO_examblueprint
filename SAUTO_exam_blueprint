SAUTO Exam blueprint notes

1.0 Network Programmability foundation

1.1 Utilize common version control operations with git (add, clone, push, commit, diff, branching, and merging conflict)
https://app.pluralsight.com/library/courses/getting-started-git/table-of-contents

1.1.0 === Quick setup ===
https://github.com/wired-brain-coffee/wired-brain-recipes.git
We recommend every repository include a README, LICENSE, and .gitignore.


...or create a new repository on the command line

echo "# wired-brain-recipes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master


...or push an existing repository from the command line

git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master

...or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


What is GIT?
Git is a VCS: Version Control System.
- This is Soiftware designed to record changes made to files over time.
- Ability to revert back to a previous file version or project version.
- Compare changes made to files from one version to another.
- Version control any plain text file, not just source code.

Version control is the ultimate time travel machine for your project.

UNDERSTANDING HOW GIT MANAGES DATA IS THE MOST IMPORTANT THING TO REMEMBER ABOUT GIT

1.1.1 ==== GIT has three main Stages of a File =====

GIT has three main Stages of a File

1. Committed < data is savely store >
2. Modified  < data is modified from the previously commited stage, file contents have changed, but has not commited the file >
3. Staged    < Changes are Marked for Commit, so Marked changes have been added to the commit snapshot >

The Three States of a GIT Project are similar:

1. Working Directory			2. Staging Area (Index)    3. .git directory (Repository)
      <-------------Checkout a version of the project from origin--------------*
	  *------Stage fixes for next commit--->
											*----Commit changes form Index----->


Using the command line
pwd 	= print working directory <just returns your current folder path location>
cd		= change working directory
cd~		= change to the home directory
cd.. 	= change up one level in directory hierarchy
ls		= list files in a directory (windows dir)
touch	= create a new empty file (copy con for windows users)

1.1.2 ==== Install Git on Linux ====

Debian: flavors ( Ubuntu )
sudo apt-get install git

Fedora:
sudo yum install git

Windows: (has several free options but below install is easy)
https://git-scm.com/download/win
this automatically installs the git installer. This installation also installs a command-line tool called Git BASH.
that will give you a more Linux feel on a Window system to perform the GIT commands.

Mac: Similar to windows but use the below link instead:
https://git-scm.com/download/mac
Mac users can also use: homebrew <fee and opensource package manger> 
brew install git

verify if installation was successful with:
$ git --version
git version 2.25.1

Now that we have verified that Git has been installed, the first thing we should do is set up our username and email address:

$ git config --global user.name "jayantbehari"
$ git config --global user.email "beharij@gmail.com"

If you want to run the same for a specific project, you can do so without the --global option when you are in the project.
This will overwrite your global settings, but just for this specific project.

if you want to check your configuration settings type:
git config --list

To check out a specific setting say "name" type:

git config user.name

The gitmanual at your finger tips:
man git

Git commands are divided in high level ("porcelain") and low level ("plumbing ") commands.

* porcelain:
	git-add < add file contents to the index.>
	git-am 	< apply a series of patches from a mailbox.>
	git-archive < create an archive of files from a named tree.>
	git-checkout < switch branches or restore working tree files.>
	git-clone <clone a repository into a new directory.>
	git-commit <record changes to the repository>
	git-diff <show changes between commits, commit and working tree, etc.>
	git-grep <pring lines matching a pattern.>
	git-init <create an empty git repository or reinitialize an existing one.>
	git-merge <Join tow or more development histories together.>
	git-push <update remote refs along with associated objects.>
	
* Plumbing <prilemanary for scripted use, goes deeper than porcelain, plumbing is for advanced users>
	git-apply <apply a patch to files and/or to the index.>
	git-commit-tree <create a new commit object.>
	git-mktree <build a tree-object from ls-tree formatted text.>
	

git help config <gives more help regarding the config section>

1.1.3 === To initialize a new git repository ===

cd to the folder of your new project.
$ cd desktop/cafe_recipes
$ git init <creates a hidden .git directory. Go to this folder cd .git then ls gives a list of files and folders in the .git directory
remember that the .git directory contains all the git meta data for the newly created project.

We have now intalled git, initialized git and added files to our git project as a git repository.
The files are now version controlled by git, arnd are ready to be4 tracked of any changes to be made.

But as all this is only local at our local desktop computer this project can only be updated from the local computer
To solve this we can host this git repository in an online cloud-like setting.

GITHUB <online GIT repository hosting>
Using HHTPS URLs to push or pull changes to or from your repository

https://github.com/wired-brain-coffee/wired-brain-recipes.git
We recommend every repository include a README, LICENSE, and .gitignore.


...or create a new repository on the command line

echo "# wired-brain-recipes" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master


...or push an existing repository from the command line

git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
git push -u origin master

...or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


There is also an SSH option on github. (just click it)
in order to use this SSH secure protocol, you need to first generate an SSH key pair and then add that public key to your GitHub account
in your profile settings. Using SSH URLs to push or pull changes to or from your repository, GitHub will prompt you with your password and
you will need to enter in your SSH key passphrase.

more information is available at:
https://help.github.com/articles/which-remote-url-should-i-use

to stage all files currently in your project folder on your local desktop/laptop type":

git add .

then you could commit your first commit by typing:

git commit -m "first commit"  
< the -m option means message >
git then responds back with some interesting information and it can tell us what we just did. We then need to connect our local repository 
to the one we just created GitHub, by linking the two repositories with a git command. this can be done with the command:
git remote add origin https://github.com/wired-brain-coffee/wired-brain-recipes.git
This command adds the origin GitHub repository to our local repository by creating a link that allows us to push and pull changes between the two.
Now, we need to push our repository that is now pointing to our GitHub repository by typing: 
git push -u origin master

We are then prompted to type our GitHub username and password. and if verified, Git responds back with some information that at the bottam says,
Branch 'master' set up to track remote branch 'master' from origin.
Now this means that everything works!


1.1.4 ===Basic commands of Every day Git ===

https://github.com/a-a-ron

in the previous module we instlled GIT with the global and local configurations with the 'git config' command
We also learned how to use 'man git' and the quick reference help guide 'git help'

High-level porcelain commands:
git add
git push

common everyday git commands are:
git status --short
git dif --staged
git diff
git status
git add A
git status -s

type clear command to clean your window

$ clear

you can check the status of your project any time:
$ git status
On branch masternothing to commit, working tree clean

A branh in git is a lightweight movable pointer to your project at a specific point in time.
Since our local and remote repository are in sync with each other, our local master branch is equal to the origin master branch.
When you initialize your git repository git creates a branch called master. When you make changes in git, you make themn on a specific branch.
Branches are a core concept in git and a feature that adds a lot of value by allowing many different types of workflows that can involve many
different types of branches. But at least for right now we'll keep things simple and make all of our changes directly on the master branch.

















	
	
	
	


























======================== BASH ============================


#!/bin/bash

# Simple note-taking script

# get the date
date=$(date)

# get the topic
topic="$1"

# filename to write to
filename="${HOME}/${topic}notes.txt"

# Ask user for input
read -p "Your note: " note

echo $date: $note >> "$filename"
echo Note \'$note\' saved to $filename



